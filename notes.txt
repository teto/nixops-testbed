nixops create ~/testbed/mptcp-local-logical.nix ~/testbed/mptcp-local-physical.nix
nixops deploy --debug

https://reproducingnetworkresearch.wordpress.com/2012/06/04/multipath-tcp-over-wifi-and-3g-links/
https://bitbucket.org/angadsg/mininet-mptcp/src/ce38b53d0d06f56235b65269c21130e3d87ad5b7/src/topology.py?at=master&fileviewer=file-view-default

By default tshark will capture from the first interface, you need to add any to
check that it worked ok

tshark -V -r file_to_convert.pcap

ip tuntap
sudo lkl-hijack.sh ping 127.0.0.1


This is good to test your latency
http://bencane.com/2012/07/16/tc-adding-simulated-network-latency-to-your-linux-server/

tc -s qdisc ls dev eth0

tc qdisc add dev enp0s2 root netem delay 100ms

tc qdisc del dev enp0s2 root netem

You can use https://github.com/ze-phyr-us/tcviz

Driver has suspect GRO implementation, TCP performance may be compromised.
make htmldocs

gdb vmlinux
(gdb) target remote localhost:1234
(gdb) continue
(gdb) apropos lx


debugfs /sys/kernel/debug debugfs rw,relatime 0 0


/proc/kallsyms and /sys/kernel/debug/kernel_page_table




Module parameters can be specified in two ways: via the kernel command
line with a module name prefix, or via modprobe, e.g.:

    (kernel command line) usbcore.blinkenlights=1
    (modprobe command line) modprobe usbcore blinkenlights=1

Parameters for modules which are built into the kernel need to be
specified on the kernel command line.  modprobe looks through the
kernel command line (/proc/cmdline) and collects module parameters
when it loads a module, so the kernel command line can be used for
loadable modules too.



== HOW TO RUN THE TESTS == 


